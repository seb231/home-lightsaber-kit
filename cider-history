;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(target-results {:setting-2 :SFSS :need-2 :ASD} 1 10 1 (main/read-config (str (System/getProperty \"user.home\") \"/code/witan.send.afc/config-richmond-scenario-1.edn\")) 1)" "(target-results {:setting-2 :SFSS :need-2 :ASD} 1 2 1 (main/read-config (str (System/getProperty \"user.home\") \"/code/witan.send.afc/config-richmond-scenario-1.edn\")) 1)" "(target-results {:setting-2 :SFSS :need-2 :ASD} 1 2 1 (main/read-config (str (System/getProperty \"user.home\") \"/code/witan.send.afc/config-richmond-scenario-1.edn\")))" "(- 8 6)" "(- 6 8)" "(>= 10 2)" "(run-multi-configs example-params-inputs (main/read-config \"data/demo/config.edn\"))" "(run-multi-configs example-params-inputs (main/read-config \"data/demo/config-1000.edn\"))" "(run-multi-configs example-params-inputs)" "(run-multi-configs example-params-inputs default-config)" "(run-multi-configs example-params-inputs \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\" \"data/demo/config-1000.edn\")" "(merge (first foo) {:project-dir \"data/demo\"})" "foo" "(merge foo {:project-dir \"data/demo\"})" "project-dir" "(merge foo {:project-dir project-dir})" "(def foo *1)" "(run-multi-configs example-params-inputs \"data/demo/\" \"data/demo/config-1000.edn\")" "(clojure.pprint/pprint (first *2))" "(run-multi-configs example-params-inputs \"data/demo/\" \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\" (main/read-config \"data/demo/config-1000.edn\"))" "default-config" "(main/read-config \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\" (main/read-config \"data/demo/config-1000.edn\"))" "(run-multi-configs example-params-inputs \"data/demo/\" default-config)" "example-params-inputs" "(run-multi-configs example-params-inputs \"data/demo/\" \"data/demo/config-1000.edn\")" "(main/read-config \"data/demo/config-1000.edn\")" "(type *1)" "(main/read-config \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\")" "(run-multi-configs example-params-inputs \"data/demo/\" \"data/demo/config-1000.edn\")" "(System/getProperty \"user.dir\")" "(.getParent (java.io.File. \"data/demo/config-1000.edn\"))" "(java.io.File. \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\" \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\" )" "(main/read-config \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\" )" "(read-config \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\" \"data/demo/config-1000.edn\")" "(main/read-config \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\" \"data/demo/config-1000.edn\")" "(main/read-config \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\" \"data/demo/config-1000.edn\")" "(run-multi-configs example-params-inputs \"data/demo/\")" "(mc/run-multi-configs (create-transition-modifier-seq {:need-1 :X} 1 4 1) \"data/demo/\" \"data/demo/config-1000.edn\")" "(read-config \"data/demo/config-1000.edn\")" "(if nil
                        \"data/demo/config-1000.edn\"
                        \"nope\")" "(if \"data/demo/config-1000.edn\"
                        \"data/demo/config-1000.edn\"
                        \"nope\")" "(mc/run-multi-configs (create-transition-modifier-seq {:need-1 :X} 1 4 1) \"data/demo/\" \"data/demo/config-1000.edn\")" "(mc/run-multi-configs (create-transition-modifier-seq {:need-1 :X} 1 4 1) \"data/demo/\")" "(mc/run-multi-configs (create-transition-modifier-seq {:need-1 :X} 1 4 1) \"data/demo/\" \"data/demo/config-1000.edn\")" "(mc/run-multi-configs (create-transition-modifier-seq {:need-1 :X} 1 4 1) \"data/demo/\")" "(mc/run-multi-configs (create-transition-modifier-seq {:need-1 :X} 1 4 1) \"data/demo/\" \"data/demo/config-1000.edn\")" "(mc/run-multi-configs (create-transition-modifier-seq {:need-1 :X} 1 4 1) \"data/demo/\")" "(run-multi-configs (create-transition-modifier-seq {:need-1 :X} 1 4 1) \"data/demo/\")" "(create-transition-modifier-seq {:need-1 :X} 1 4 1)" "(create-transition-modifier-seq {:need-1 :X :modify-transition-by 1} 1 4 1)" "(mapv #(update-transition-modifier {:need-1 :X :modify-transition-by 1} %) (range 1 4 1))" "(mapv #(update-transition-modifier v %) (range 1 4 1))" "(update-transition-modifier {:need-1 :X :modify-transition-by 1} 2)" "(clojure.pprint/pprint (update-params [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] 1 4 1))" "(clojure.pprint/pprint (update-params-options [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] 1 4 1))" "(clojure.pprint/pprint (bar [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] 1 4 1))" "(bar [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] 1 4 1)" "(mapv #(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] %) (range 1 4 1))" "(map #(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] %) (range 1 4 1))" "(clojure.pprint/pprint (map #(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] %) (range 1 4 1)))" "(map #(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] %) (range 1 4 1))" "(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] 2)" "(map #(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] %) (range 1 4 1))" "(mapv #(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] %) (range 1 4 1))" "(map-v #(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] %) (range 1 4 1))" "(map #(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] %) (range 1 4 1))" "(update-modifier [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]] 2)" "(first (first [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]]))" "(first [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]])" "(bar [[[:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]]])" "(bar (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]))" "(assoc (first (first (second (first (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]))))) :modify-transition-by 2)" "(first (first (second (first (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]])))))" "(first (second (first (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]))))" "(first (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]))" "(bar (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]))" "(first (second (first (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]))))" "(second (first (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]])))" "(first (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]))" "(second (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]))" "(bar (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]]))" "(foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]])" "(clojure.pprint/pprint (map (fn [v] (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by v}]])) (range 1 40 10)))" "(clojure.pprint/pprint (map (fn [v] (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by v}]])) (range 1 4 1)))" "(map (fn [v] (foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by v}]])) (range 1 4 1))" "example-params-inputs" "(foo [:transition-parameters :transitions-to-change] [[{:need-1 :X :modify-transition-by 1}]])" "(assoc (first (first (second (first example-params-inputs)))) :modify-transition-by 2)" "(update (first (first (second (first example-params-inputs)))) :modify-transition-by 2)" "(first (first (second (first example-params-inputs))))" "(first (second (first example-params-inputs)))" "(second (first example-params-inputs))" "(val (first example-params-inputs))" "(first example-params-inputs)" "example-params-inputs" "(run-multi-configs example-params-inputs \"data/demo/\")" "(run-multi-configs example-params-inputs \"test/\")" "(-main)" "(val (first foo))" "(key (first foo))" "(keys (first foo))" "(kesy (first foo))" "(first (first foo))" "(first (firt foo))" "(first foo)" "(def foo (core/load-joiner-csvs \"data/joiner-model-mvn.csv\"
                                                 \"data/joiner-model-params.csv\"))" "foo" "(first foo)" "(def foo (-> (core/load-joiner-csvs \"data/joiner-model-mvn.csv\"
                                                 \"data/joiner-model-params.csv\")
                          (model/joiners-model)))" "(joiners-model (r/make-random 50))" "(episodes->projection-tsv \"results.csv\" \"data/episodes.csv\" 50)" "((joiners-model (r/make-random 50)) 1)" "((joiners-model (r/make-random 50)) 0 (:beginning (nth example-1 2)) (r/make-random 50))" "((joiners-model (r/make-random 50)) 0 (:beginning (nth example-1 2)))" "((joiners-model (r/make-random 50)) 0)" "((joiners-model (r/make-random 50)) (:beginning (nth example-1 2)))" "(joiners-model (r/make-random 50))" "(joiners-model (:beginning (nth example-1 2)) (r/make-random 50))" "(nth example-1 2)" "((episodes-model example-2) 0 (duration-model-0 (r/make-random 50)) (nth example-1 2) (r/make-random 50))" "(concat '({:a 1 :b2 2}) '({:c 2 :d 5}))" "(concat {:a 1 :b2 2} {:c 2 :d 5})" "((episodes-model example-2) 0 (duration-model-0 (r/make-random 50)) (nth example-1 2) (r/make-random 50))" "(conj example-data most-recent)" "(map :episodes (conj example-data most-recent))" "example-2" "(map :episodes example-2)" "(conj example-data most-recent)" "(concat example-data most-recent)" "(map :episodes example-2)" "example-2" "((episodes-model example-2) 0 (duration-model-0 (r/make-random 50)) (nth example-1 2) (r/make-random 50))" "((episodes-model example-2) 0 (duration-model-0 (r/make-random 50)) (nth example-2 2) (r/make-random 50))" "((episodes-model example-2) 0 (duration-model-0 (r/make-random 50)) (nth example-2) (r/make-random 50))" "(map :episodes example-1)" "example-1" "(nth example-1 3)" "((episodes-model example-2) 0 (duration-model-0 (r/make-random 50)) (nth example-1 3) (r/make-random 50))" "((episodes-model example-2) 0 (duration-model-0 (r/make-random 50)) (first example-1) (r/make-random 50))" "(count (merge example-data foo))" "(count example-data)" "(merge example-data foo)" "(nth example 2)" "((episodes-model example) 0 (duration-model-0 (r/make-random 50)) (nth example 2) (r/make-random 50))" "(map :episodes example)" "example" "((episodes-model example) 0 (duration-model-0 (r/make-random 50)) (nth example 1) (r/make-random 50))" "((episodes-model example) 0 (duration-model-0 (r/make-random 50)) (first example) (r/make-random 50))" "(first example)" "((episodes-model example) 0 (duration-model-0 (r/make-random 50)) (first example) (r/make-random 50))" "(map :episodes example)" "example" "((episodes-model example) 0 (duration-model-0 (r/make-random 50)) (first example) (r/make-random 50))" "(map :episodes example)" "example" "((episodes-model example) 0 (duration-model-0 (r/make-random 50)) (first example) (r/make-random 50))" "(episodes->projection-tsv \"results.csv\" \"data/episodes.csv\" 50)" "(episodes->projection-tsv \"results\" \"data/episodes.csv\" 50)" "(first example)" "((episodes-model example) 0 (duration-model-0 (r/make-random 50)) (first example) (r/make-random (rand-int 10000)))" "(map :episodes example)" "example" "((episodes-model example) 0 (duration-model-0 (r/make-random 50)) (first example) (r/make-random (rand-int 10000)))" "((episodes-model example) 0 (duration-model-0 (r/make-random 50)) (first example) (r/make-random 50))" "(duration-model-0 (r/make-random 50))" "(episodes-model example)" "example-data" "(episodes-model example-data)" "(rand-int 10000)" "(r/rand-double [1 10])" "(r/rand-double 1)" "(r/rand-double)" "(> 1 0)" "(map #((duration-model duration-data) 0 (r/make-random %)) (range 1 1000))" "(apply max (reduce concat (reduce into [] (vals duration-data))))" "(apply min (reduce concat (reduce into [] (vals duration-data))))" "(min (reduce concat (reduce into [] (vals duration-data))))" "(reduce concat (reduce into [] (vals duration-data)))" "(reduce concat (vals duration-data))" "(reduce concat (reduce into [] (vals duration-data)))" "(map concat (reduce into [] (vals duration-data)))" "(reduce into [] (vals duration-data))" "(into [] (vals duration-data))" "(reduce into [] (vals duration-data))" "(map vec (vals duration-data))" "(vals duration-data)" "duration-data" "(val duration-data)" "(vals duration-data)" "(map concat (first (vals duration-data)))" "(map concat (vals duration-data))" "(first (vals duration-data))" "(vals duration-data)" "(mapcat concat (vals duration-data))" "(map concat (vals duration-data))" "(reduce into [] (vals duration-data))" "(vals duration-data)" "duration-data" "((duration-model duration-data) 0 (r/make-random 1))" "((duration-model duration-data) 0 (r/make-random 123))" "((duration-model duration-data) 0 (r/make-random 122))" "((duration-model duration-data) 0 (r/make-random 12))" "(duration-model duration-data 0 (r/make-random 12))" "(duration-model duration-data)" "(first foo)" "(run! print (second (first foo)))" "(run! println (second (first foo)))" "(println (second (first foo)))" "(second (first foo))" "(first (first foo))" "(run! println (first (first foo)))" "(run! println (first foo))" "(println (first foo))" "(first foo)" "(run! (first foo))" "(run! print (first foo))" "(run! println (first foo))" "(run! map println (first foo))" "(run! (map println (first foo)))" "(doseq (map println (first foo)))" "(def bar (doall (map println (first foo))))" "foo" "(def bar (doall (map println (first foo))))" "(doall (map println (first foo)))" "(doall (map print (first foo)))" "(doall (print (first foo)))" "(daoall (print (first foo)))" "(print (first foo))" "(first foo)" "(def foo (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                                    \"data/duration-model-median.csv\"
                                                    \"data/duration-model-upper.csv\"))" "(first foo)" "(def foo (core/load-duration-csvs \"data/duration-model-lower.csv\"
                                                    \"data/duration-model-median.csv\"
                                                    \"data/duration-model-upper.csv\"))" "(d-model 11 seed)" "(d-model 13 seed)" "(d-model 12 seed)" "d-model" "(d-model)" "((d-model) 12 seed)" "d-model" "(map #(project-period-close d-model e-model % seed) example)" "(map (project-period-close d-model e-model % seed) example)" "(-> example first (assoc :open? true))" "(-> example first (assoc % :open? true))" "(project-period-close d-model e-model (first open-data) seed)" "(project-period-close d-model e-model (first open-data) (r/make-random 49))" "(:birthday (first prepped-data))" "(:birthday (first example))" "(first example)" "(project-period-close d-model e-model (first open-data) (r/make-random 49))" "(first open-data)" "(project-period-close d-model e-model (first open-data) (r/make-random 49))" "(project-period-close d-model e-model (first open-data) (r/make-random 50))" "(first open-data)" "(project-period-close d-model e-model (first open-data) (r/make-random 50))" "(project-period-close duration-model-2 e-model (first open-data) (r/make-random 50))" "(project-period-close (-> (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                                    \"data/duration-model-median.csv\"
                                                    \"data/duration-model-upper.csv\")
                           (m/duration-model)) e-model (first open-data) (r/make-random 50))" "(map #(project-period-close (-> (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                                    \"data/duration-model-median.csv\"
                                                    \"data/duration-model-upper.csv\")
                           (m/duration-model)) e-model % (r/make-random 50)) open-data)" "(map #(project-period-close (-> (core/load-duration-csvs \"data/duration-model-lower.csv\"
                                                    \"data/duration-model-median.csv\"
                                                    \"data/duration-model-upper.csv\")
                           (model/duration-model)) e-model % (r/make-random 50)) open-data)" "(count (val (first foo)))" "(val (first foo))" "(vals (first foo))" "(first foo)" "(def foo(core/load-duration-csvs \"data/duration-model-lower.csv\"
                                    \"data/duration-model-median.csv\"
                                    \"data/duration-model-upper.csv\"))" "(first *)" "(core/load-duration-csvs \"data/duration-model-lower.csv\"
                                                    \"data/duration-model-median.csv\"
                                                    \"data/duration-model-upper.csv\")" "(core/load-joiner-csvs \"data/joiner-model-mvn.csv\"
                                                 \"data/joiner-model-params.csv\")" "(int (p/sample-1 (d/uniform {:a 1 :b 101}) (first (r/split (r/make-random 50)))))" "(first (r/split (r/make-random 50)))" "(r/split (r/make-random 50))" "(get {0 [[0 0 0] [1 6 17] [35 56 83]]
                                1 [[0 0 0] [1 6 17] [35 56 83]]
                                2 [[0 0 0] [1 6 17] [35 56 83]]
                                3 [[0 0 0] [1 6 17] [35 56 83]]
                                4 [[0 0 0] [1 6 17] [35 56 83]]
                                5 [[0 0 0] [1 6 17] [35 56 83]]
                                6 [[0 0 0] [1 6 17] [35 56 83]]
                                7 [[0 0 0] [1 6 17] [35 56 83]]
                                8 [[0 0 0] [1 6 17] [35 56 83]]
                                9 [[0 0 0] [1 6 17] [35 56 83]]
                                10 [[0 0 0] [1 6 17] [35 56 83]]
                                11 [[0 0 0] [1 6 17] [35 56 83]]
                                12 [[0 0 0] [1 6 17] [35 56 83]]
                                13 [[0 0 0] [1 6 17] [35 56 83]]
                                14 [[0 0 0] [1 6 17] [35 56 83]]
                                15 [[0 0 0] [1 6 17] [35 56 83]]
                                16 [[0 0 0] [1 6 17] [35 56 83]]
                                17 [[0 0 0] [1 6 17] [35 56 83]]
                                18 [[0 0 0] [1 6 17] [35 56 83]]} 12)" "(min 12 17)" "(d-model 12 (r/make-random 50))" "(d-model 15 (r/make-random 50))" "(map #(project-period-close d-model e-model % (r/make-random 50)) open-data)" "(project-period-close d-model e-model (first open-data) (r/make-random 50))" "(map #(assoc % :open? true) prepped-data)" "prepped-data" "projection-start" "(filter :open? (->> (episodes data)
                     (assoc-period-id)
                     (group-by :period-id)
                     (vals)
                     (map (comp #(assoc-open-at % projection-start)
                                summarise-periods))))" "(->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map (comp #(assoc-open-at % projection-start)
                               summarise-periods)))" "(filter :open? example)" "(clojure.pprint/pprint prepped-data)" "(map #(project-period-close d-model e-model % (r/make-random 50)) prepped-data)" "(project-period-close d-model e-model (first prepped-data) (r/make-random 50))" "prepped-data" "e-model" "(project-period-close d-model e-model prepped-data (r/make-random 50))" "e-model" "(count (c/episodes->periods example))" "(count (filter :end (c/episodes->periods example)))" "(filter :end (c/episodes->periods example))" "(filter :open? (c/episodes->periods example))" "(c/episodes->periods example)" "prepped-data" "example" "exampe" "example" "(->> example-data
                                (map c/format-episode)
                                c/episodes)" "(-> example-data
                    (c/episodes->periods)
                    )" "(-> example-data
                    (c/episodes->periods)
                    (prepare-ages (r/make-random 50)))" "(-> example-data
                    (c/episodes->periods)
                    (prepare-ages (r/make-random seed)))" "(-> example-data
                    (core/episodes->periods)
                    (prepare-ages (r/make-random seed)))" "(-> example-data
                    (core/episodes->periods)
                    (projection/prepare-ages (r/make-random seed)))" "(count example-data)" "(count example)" "(filter :end example)" "(filter :open? example)" "example" "e-model" "(((joiners-model foo) (clojure.test.check.random/make-random 50)) 12 (clj-time.format/parse (clj-time.format/formatter :date) \"2018-03-31\"))" "(((joiners-model foo) (clojure.test.check.random/make-random 50)) 12 (clj-time.format/parse date-format \"2018-03-31\"))" "(((joiners-model foo) (clojure.test.check.random/make-random 50)) 12 (f/parse date-format \"2018-03-31\"))" "(((joiners-model foo) (clojure.test.check.random/make-random 50)) 12)" "((joiners-model foo) (clojure.test.check.random/make-random 50))" "(joiners-model foo)" "(keys foo)" "(key (first foo))" "(keys (first foo))" "(first (first foo))" "(def foo (cic.core/load-joiner-csvs \"data/joiner-model-mvn.csv\"
                             \"data/joiner-model-params.csv\"))" "(witan.cic.core/load-joiner-csvs )" "(def foo (witan.cic.core/load-joiner-csvs \"data/joiner-model-mvn.csv\"
                             \"data/joiner-model-params.csv\"))" "(first foo)" "(def foo (load-joiner-csvs \"data/joiner-model-mvn.csv\"
                             \"data/joiner-model-params.csv\"))" "(witan.cic.core/load-joiner-csv \"data/joiner-model-mvn.csv\"
                                                 \"data/joiner-model-params.csv\")" "(count (filter :end example))" "(count example)" "(filter :end example)" "example" "exampl" "((episodes-model example) 18 0 example (r/make-random 50))" "((episodes-model example) 18 0 [{:offset 0, :placement :Q1}] (r/make-random 50))" "(first example)" "(nth (get age-duration-lookup [(min 15 17) 0]) 1)" "(get age-duration-lookup [(min 15 17) 0])" "age-duration-lookup" "(get age-duration-lookup [(min 15 17) 0])" "(count (get age-duration-lookup [(min 15 17) 0]))" "(get age-duration-lookup [(min 15 17) 0])" "(get (get age-duration-lookup [(min 15 17) 0]) 1)" "(int (kixi.stats.protocols/sample-1 (kixi.stats.distribution/uniform {:a 0 :b 2}) (r/make-random 50)))" "(int (p/sample-1 (d/uniform {:a 0 :b 2}) (r/make-random 50)))" "(rand-nth-seeded (get age-duration-lookup [(min 15 17) 0]) (r/make-random 50))" "(get age-duration-lookup [(min 15 17) 0])" "(rand-nth-seeded (get age-duration-lookup [(min 15 17) 0]) (r/make-random 50))" "(min 15 17)" "(get age-duration-lookup [(min 15 17) 0])" "age" "(get age-duration-lookup [(min age 17) 0])" "(get age-duration-lookup [(min 2 17) 0])" "((episodes-model example) 18 0 (r/make-random 50))" "((episodes-model example) 18 1 (r/make-random 50))" "((episodes-model example) 15 1 (r/make-random 50))" "(rand-nth-seeded [15 2] (r/make-random 50))" "(rand-nth-seeded [15 02] (r/make-random 50))" "(rand-nth-seeded [15 0] (r/make-random 50))" "((episodes-model example) 15 0 (r/make-random 50))" "age-duration-lookup" "[(min 2 17) 0]" "(get age-duration-lookup [(min 2 17) 0])" "[(min age 17) 0]" "(get age-duration-lookup [(min age 17) 0])" "(def age-duration-lookup (reduce (fn [lookup {:keys [admission-age duration episodes]}]
                                      (let [yrs (/ duration 365.0)]
                                        (update-fuzzy lookup [admission-age yrs] conj episodes)))
                                    {} example))" "(Math/round (/ 0 365.0))" "(Math/round (/ 2 365.0))" "((episodes-model example) 2 0 (r/make-random 50))" "((episodes-model example) 2 2 (r/make-random 50))" "((episodes-model example) 1 2 (r/make-random 50))" "(episodes-model example)" "(reduce (fn [lookup {:keys [admission-age duration episodes]}]
                                                       (let [duration-yrs (/ duration 365.0)]
                                                         (reduce (fn [lookup {:keys [offset placement]}]
                                                                   (let [offset-yrs (/ offset 365)]
                                                                     (update-fuzzy lookup [admission-age duration-yrs placement offset-yrs] conj episodes)))
                                                                 lookup
                                                                 episodes)))
                                                     {} example)" "(def foo (reduce (fn [lookup {:keys [admission-age duration episodes]}]
                           (let [yrs (/ duration 365.0)]
                             (update-fuzzy lookup [admission-age yrs] conj episodes)))
                         {} example))" "(reduce (fn [lookup {:keys [admission-age duration episodes]}]
                                      (let [yrs (/ duration 365.0)]
                                        (update-fuzzy lookup [admission-age yrs] conj episodes)))
                                    {} example)" "(mapv int [(Math/floor yrs) (Math/ceil yrs)])" "[(Math/floor yrs) (Math/ceil yrs)]" "yrs" "(def yrs (/ (:duration (first example)) 365.0))" "(Math/floor 0.1)" "(floor 0.1)" "(map #(-> % first second) foo)" "(map #(-> % first) foo)" "(map #(-> % first) result)" "foo" "(update-fuzzy {} [age yrs] conj episodes)" "(/ (:duration (first example)) 365.0)" "(:duration (first example))" "(first example)" "(/ (:duration (first example)) 365.0)" "(vec (distinct (map #(-> % first first) foo)))" "[(- age 1) age (+ age 1)]" "(def age 15)" "(distinct (map #(-> % first first) foo))" "(distinc (map #(-> % first first) foo))" "(unique (map #(-> % first first) foo))" "(map #(-> % first first) foo)" "(map #(-> first first) foo)" "(map first foo)" "foo" "(def foo (update-fuzzy {} [15 (/ 8 365.0)] conj [{:offset 0, :placement :Q1}]))" "(int (/ 8 365))" "(/ 8 365)" "(clojure.pprint/pprint (update-fuzzy {} [15 (/ 8 365.0)] conj [{:offset 0, :placement :Q1}]))" "(update-fuzzy {} [15 (/ 8 365.0)] conj [{:offset 0, :placement :Q1}])" "example" "example-data" "(update-fuzzy {:keys [admission-age duration episodes]} [admission-age (/ duration 365.0)] conj episodes)" "(update-fuzzy {:keys [admission-age duration episodes]} [admission-age yrs] conj episodes)" "(reduce (fn [lookup {:keys [admission-age duration episodes]}]
                                      (let [yrs (/ duration 365.0)]
                                        (update-fuzzy lookup [admission-age yrs] conj episodes)))
                                    {} example-data)" "(episodes-model example)" "(filter :end example)" "(filter :open? example)" "example" "(r/split-n (r/make-random 42) 3)" "(r/make-random 42)" "(r/split-n (r/make-random 42) 2)" "(r/split-n 40 3)" "(r/split-n seed 3)" "(first foo)" "(first (first foo))" "(def foo (core/load-joiner-csvs \"data/joiner-model-mvn.csv\"
                                                 \"data/joiner-model-params.csv\"))" "(first foo)" "(def foo (core/load-joiner-csvs \"data/joiner-model-mvn.csv\"
                                                 \"data/joiner-model-params.csv\"))" "(first bar)" "(def bar (load-csv \"data/joiner-model-params.csv\"))" "bar" "(map :dispersion bar)" "foo" "(map :dispersion bar)" "(map #(parse-double (:dispersion %)) bar)" "(map #(parse-double (:rate %)) bar)" "(map #(parse-double (:shape %)) bar)" "(parse-double \"0.00677722291365507\")" "bar" "(def bar (load-csv \"data/joiner-model-params.csv\"))" "(first bar)" "bar" "(def bar (->> (load-csv \"data/joiner-model-params.csv\")
                    (map #(-> %
                              (update :shape parse-double)
                              (update :rate parse-double)
                              (update :dispersion parse-double)))))" "(first foo)" "bar" "(first bar)" "(def bar (load-csv \"data/joiner-model-params.csv\"))" "(def bar (->> (load-csv \"data/joiner-model-params.csv\")
                    (map #(-> %
                              (update :shape parse-double)
                              (update :rate parse-double)
                              (update :dispersion parse-double)))
                    (map (juxt (comp parse-int :age) #(dissoc % :age)))
                    (into {})))" "(first foo)" "(def foo (->> (load-csv \"data/joiner-model-mvn.csv\")
                  (mapv #(reduce-kv (fn [coll k v] (assoc coll k (parse-double v))) {} %))))" "            (core/load-joiner-csvs 
                                                 \"data/joiner-model-params.csv\")" "(def foo (->> (load-csv \"data/joiner-model-mvn.csv\")
                  (mapv #(reduce-kv (fn [coll k v] (assoc coll k (parse-double v))) {} %))))" "(def foo (core/load-joiner-csvs \"data/joiner-model-mvn.csv\"
                                                 \"data/joiner-model-params.csv\"))" "(def bar (core/load-joiner-csvs \"data/joiner-model-mvn.csv\"
                                                 \"data/joiner-model-params.csv\"))" "(first foo)" "(def foo (core/csv->episodes \"/Users/Seb/code/witan.csc.suffolk/data/episodes.csv\"))" "(def example (c/episodes->periods (c/episodes (map c/format-episode '({:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1999\", :ceased \"2017-02-18\", :id \"120\", :report-year \"2017\", :placement \"K1\", :report-date \"2017-02-10\"}
                                                                      {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1999\", :ceased \"2017-04-18\", :id \"120\", :report-year \"2017\", :placement \"K2\", :report-date \"2017-02-18\"}
                                                                      {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1999\", :ceased \"2015-02-18\", :id \"120\", :report-year \"2015\", :placement \"U1\", :report-date \"2015-02-10\"}
                                                                      {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1999\", :ceased \"2014-02-18\", :id \"120\", :report-year \"2014\", :placement \"U1\", :report-date \"2014-02-10\"}
                                                                      {:sex \"2\", :care-status \"B1\", :legal-status \"C1\", :uasc \"False\", :dob \"2000\", :ceased nil, :id \"121\", :report-year \"2017\", :placement \"U1\", :report-date \"2017-02-10\"}
                                                                      {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1998\", :ceased \"2017-05-18\", :id \"122\", :report-year \"2017\", :placement \"U2\", :report-date \"2017-05-10\"}
                                                                      {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1998\", :ceased nil, :id \"122\", :report-year \"2018\", :placement \"U2\", :report-date \"2018-05-10\"}
                                                                      {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"True\", :dob \"1999\", :ceased \"2017-07-18\", :id \"124\", :report-year \"2017\", :placement \"U2\", :report-date \"2017-06-10\"}
                                                                      {:sex \"2\", :care-status \"N1\", :legal-status \"V3\", :uasc \"True\", :dob \"1999\", :ceased \"2017-07-18\", :id \"124\", :report-year \"2017\", :placement \"U2\", :report-date \"2017-06-10\"}
                                                                      {:sex \"2\", :care-status \"N1\", :legal-status \"V4\", :uasc \"True\", :dob \"1999\", :ceased \"2017-07-18\", :id \"124\", :report-year \"2017\", :placement \"U2\", :report-date \"2017-06-10\"})))))" "(prepare-ages example (clojure.test.check.random/make-random 50))" "(prepare-ages example (r/make-random 50))" "(count (day-seq (clj-time.format/parse date-format \"2010-03-31\") (clj-time.format/parse date-format \"2010-04-30\")))" "(day-seq (clj-time.format/parse date-format \"2010-03-31\") (clj-time.format/parse date-format \"2010-04-30\"))" "(day-seq (clj-time.format/parse date-format \"2010-03-31\") (clj-time.format/parse date-format \"2010-04-31\"))" "(def output-from (clj-time.format/parse date-format \"2010-03-31\"))" "(day-seq output-from project-from)" "(def project-from (clj-time.format/parse date-format \"2018-03-31\"))" "(def output-from (clj-time.format/parse date-format \"2010-03-31\"))" "(def date-format
  (clj-time.format/formatter :date))" "(def output-from (clj-time.format/parse date-format \"2010-03-31\"))" "(def output-from (f/parse date-format \"2010-03-31\"))" "(zipmap ages (repeat 0))" "(def ages (range 0 19))" "(zipmap placements (repeat 0))" "(def placements [:Q2 :K2 :Q1 :R2 :P2 :H5 :R5 :R1 :A6 :P1 :Z1 :S1 :K1 :A4 :T4 :M3 :A5 :A3 :R3 :M2 :T0])" "(witan.send.validate-model/load-csv-as-maps (clojure.java.io/file (:transitions (:file-inputs config))))" "(load-csv-as-maps (clojure.java.io/file (:transitions (:file-inputs config))))" "(clojure.java.io/file (:transitions (:file-inputs config)))" "cc" "(clojure.java.io/file (:transitions (:file-inputs config)))" "(clojure.java.io/file (:project-dir config) (:transitions (:file-inputs config)))" "(clojure.java.io/file project-dir (:transitions (:file-inputs config)))" "(io/file project-dir (:transitions (:file-inputs config)))" "(:transitions (:file-inputs config))" "(get-in config [:output-parameters :output-dir])" "(str (:project-dir config) \"/data/temp/\") " "(au/temp-dir (:project-dir config))" "(temp-dir (:project-dir config))" "(clojure.string/join \"/\" [(:project-dir config) (str \"validation-\" (get-in config [:output-parameters :output-dir]))])" "(clojure.string/str/join \"/\" [(:project-dir config) (str \"validation-\" (get-in config [:output-parameters :output-dir]))])" "(str/join \"/\" [(:project-dir config) (str \"validation-\" (get-in config [:output-parameters :output-dir]))])" "(clojure.pprint/pprint config)" "(:project-dir config)" "(get-in config [:output-parameters :output-dir])" "(au/run-validation-for-test config)" "(u/run-validation-for-test config)" "(clojure.pprint/pprint config)" "config" "(def config (m/read-config \"data/demo/config.edn\"))" "(-main \"2019-08-config.edn\")" "(data-csv/read-csv (io/reader \"raw-data/2018/version-B/need-setting-costs.csv\"))" "(data-csv/read-csv (io/reader \"/raw-data/2018/version-B/need-setting-costs.csv\"))" "(data-csv/read-csv (io/reader \"/need-setting-costs.csv\"))" "(data-csv/read-csv (io/reader \"need-setting-costs.csv\"))" "(io/reader \"need-setting-costs.csv\")" "(-main \"2019-08-config.edn\")" "(csv->costs \"raw-data/2018/version-B/need-setting-costs.csv\")" "(csv->x \"a\" \"2019-08-config.edn\")" "(csv->x \"2019-08-config.edn\")" "(csv->costs \"2019-08-config.edn\")" "(-main \"2019-08-config.edn\")" "(-main)" "(-main \"2019-08-config.edn\")" "(-main)" "(- (t/in-years (t/interval (t/date-time 1999) (t/date-time 2014))) 1)" "(t/in-years (t/interval (t/date-time 1999) (t/date-time 2014)))" "(t/interval (t/date-time 1999) (t/date-time 2014))" "(:admission-age (first (prepare-ages example)))" "(:birthday (first (prepare-ages example)))" "(t/in-years (t/interval (:birthday (first (prepare-ages example))) (t/date-time 2014)))" "(t/date-time 2014)" "(t/in-years (t/interval (:birthday (first (prepare-ages example))) (t/date-time 2014)))" "(t/date-time 2014)" "(t/date-time \"2014\")" "(t/year \"2014\")" "(t/year 2014)" "(t/in-years (t/interval (:birthday (first (prepare-ages example))) 2014))" "(t/in-years (t/interval (:birthday (first (prepare-ages example))) (:birthday (first (prepare-ages example)))))" "(t/in-years (t/interval (:birthday (first (prepare-ages example))) nil))" "(t/interval (:birthday (first (prepare-ages example))) nil)" "(t/interval (:birthday (first (prepare-ages example))) 0)" "(t/interval (:birthday (first (prepare-ages example))))" "(t/in-years (:birthday (first (prepare-ages example))))" "(:birthday (first (prepare-ages example)))" "(first (prepare-ages example))" "(t/in-years (t/interval (:birthday (first (prepare-ages example))) (:beginning (first (prepare-ages example)))))" "(t/in-years (t/interval (:beginning (first (prepare-ages example))) (:birthday (first (prepare-ages example))) ))" "(first example)" "(t/in-years (t/interval (:beginning (first example)) (:birthday (first example)) ))" "(t/interval (:beginning (first example)) (:birthday (first example)) )" "(t/interval (:birthday (first example)) (:beginning (first example)))" "(first example)" "(first (projection/prepare-ages example))" "(m/duration-model durations)" "(c/load-duration-csvs \"data/duration-model-lower.csv\"
                                                     \"data/duration-model-median.csv\"
                                                     \"data/duration-model-upper.csv\")" "(count (second (first (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                                     \"data/duration-model-median.csv\"
                                                     \"data/duration-model-upper.csv\"))))" "(second (first (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                             \"data/duration-model-median.csv\"
                                             \"data/duration-model-upper.csv\")))" "(first (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                             \"data/duration-model-median.csv\"
                                             \"data/duration-model-upper.csv\"))" "(second (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                             \"data/duration-model-median.csv\"
                                             \"data/duration-model-upper.csv\"))" "(count (second (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                             \"data/duration-model-median.csv\"
                                             \"data/duration-model-upper.csv\")))" "(count (first (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                             \"data/duration-model-median.csv\"
                                             \"data/duration-model-upper.csv\")))" "(count (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                      \"data/duration-model-median.csv\"
                                      \"data/duration-model-upper.csv\"))" "(c/load-duration-csvs \"data/duration-model-lower.csv\"
                                       \"data/duration-model-median.csv\"
                                       \"data/duration-model-upper.csv\")" "(first (projection/prepare-ages example))" "(p/project-period-close d-model (first (projection/prepare-ages example)))" "(project-period-close d-model (first (projection/prepare-ages example)))" "(-> (c/load-duration-csvs \"data/duration-model-lower.csv\"
                                                    \"data/duration-model-median.csv\"
                                                    \"data/duration-model-upper.csv\")
                           (m/duration-model))" "(-> (core/load-duration-csvs \"data/duration-model-lower.csv\"
                                                    \"data/duration-model-median.csv\"
                                                    \"data/duration-model-upper.csv\")
                           (model/duration-model))" "(project-period-close (first (projection/prepare-ages example)))" "(first (projection/prepare-ages example))" "(projection/prepare-ages example)" "(p/sample-1 2 (first (r/split-n (r/make-random) 5))) " "(p/sample-1 (first (r/split-n (r/make-random) 5))) " "(r/split-n (r/make-random) 5)" "(r/split-n (r/make-random) (count example))" "(count example)" "(r/make-random)" "(projection/prepare-ages example)" "(c/episodes->periods example)" "(c/episodes->periods data)" "(def data (map format-episode '({:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1999\", :ceased \"2017-02-18\", :id \"120\", :report-year \"2017\", :placement \"K1\", :report-date \"2017-02-10\"}
                                {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1999\", :ceased \"2017-04-18\", :id \"120\", :report-year \"2017\", :placement \"K2\", :report-date \"2017-02-18\"}
                                {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1999\", :ceased \"2015-02-18\", :id \"120\", :report-year \"2015\", :placement \"U1\", :report-date \"2015-02-10\"}
                                {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1999\", :ceased \"2014-02-18\", :id \"120\", :report-year \"2014\", :placement \"U1\", :report-date \"2014-02-10\"}
                                {:sex \"2\", :care-status \"B1\", :legal-status \"C1\", :uasc \"False\", :dob \"2000\", :ceased nil, :id \"121\", :report-year \"2017\", :placement \"U1\", :report-date \"2017-02-10\"}
                                {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1998\", :ceased \"2017-05-18\", :id \"122\", :report-year \"2017\", :placement \"U2\", :report-date \"2017-05-10\"}
                                {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"False\", :dob \"1998\", :ceased nil, :id \"122\", :report-year \"2018\", :placement \"U2\", :report-date \"2018-05-10\"}
                                {:sex \"2\", :care-status \"N1\", :legal-status \"C2\", :uasc \"True\", :dob \"1999\", :ceased \"2017-07-18\", :id \"124\", :report-year \"2017\", :placement \"U2\", :report-date \"2017-06-10\"}
                                {:sex \"2\", :care-status \"N1\", :legal-status \"V3\", :uasc \"True\", :dob \"1999\", :ceased \"2017-07-18\", :id \"124\", :report-year \"2017\", :placement \"U2\", :report-date \"2017-06-10\"}
                                {:sex \"2\", :care-status \"N1\", :legal-status \"V4\", :uasc \"True\", :dob \"1999\", :ceased \"2017-07-18\", :id \"124\", :report-year \"2017\", :placement \"U2\", :report-date \"2017-06-10\"})))" "(def data '({:sex \"2\", :care-status :N1, :legal-status :C2, :uasc false, :dob 1999, :ceased #object[org.joda.time.DateTime 0x55eacfd1 \"2017-02-18T00:00:00.000Z\"], :report-year 2017, :placement :K1, :report-date #object[org.joda.time.DateTime 0x56429e1a \"2017-02-10T00:00:00.000Z\"], :child-id 120} {:sex \"2\", :care-status :N1, :legal-status :C2, :uasc false, :dob 1999, :ceased #object[org.joda.time.DateTime 0x2427274 \"2017-04-18T00:00:00.000Z\"], :report-year 2017, :placement :K2, :report-date #object[org.joda.time.DateTime 0x62e2d13f \"2017-02-18T00:00:00.000Z\"], :child-id 120} {:sex \"2\", :care-status :N1, :legal-status :C2, :uasc false, :dob 1999, :ceased #object[org.joda.time.DateTime 0x61751ef5 \"2015-02-18T00:00:00.000Z\"], :report-year 2015, :placement :Q1, :report-date #object[org.joda.time.DateTime 0x2305fe8f \"2015-02-10T00:00:00.000Z\"], :child-id 120} {:sex \"2\", :care-status :N1, :legal-status :C2, :uasc false, :dob 1999, :ceased #object[org.joda.time.DateTime 0x3245f949 \"2014-02-18T00:00:00.000Z\"], :report-year 2014, :placement :Q1, :report-date #object[org.joda.time.DateTime 0x46daad17 \"2014-02-10T00:00:00.000Z\"], :child-id 120} {:sex \"2\", :care-status :N1, :legal-status :C2, :uasc false, :dob 1998, :ceased #object[org.joda.time.DateTime 0xf11918f \"2017-05-18T00:00:00.000Z\"], :report-year 2017, :placement :Q1, :report-date #object[org.joda.time.DateTime 0x3ece764 \"2017-05-10T00:00:00.000Z\"], :child-id 122} {:sex \"2\", :care-status :N1, :legal-status :C2, :uasc false, :dob 1998, :ceased nil, :report-year 2018, :placement :Q1, :report-date #object[org.joda.time.DateTime 0x1efed9e1 \"2018-05-10T00:00:00.000Z\"], :child-id 122}))" "(episodes data)" "(def result (->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))))" "foo" "(model/duration-model foo 100)" "(model/duration-model foo)" "(model/duration-model foo 2)" "(map (model/duration-model foo) [2])" "(map (model/duration-model foo) [0 1])" "(map (model/duration-model foo) 1)" "(map (model/duration-model foo) [1])" "((model/duration-model foo) \"7\")" "((model/duration-model foo) \"age15\")" "((model/duration-model foo) 0.1)" "((model/duration-model foo) 8)" "((model/duration-model foo) 2)" "((model/duration-model foo) 1)" "(model/duration-model foo)" "(def foo (core/load-joiner-csvs \"data/joiner-model.csv\"
                                  \"data/joiner-model-params.csv\"))" "(core/load-joiner-csvs \"data/joiner-model.csv\"
                                                 \"data/joiner-model-params.csv\")" "(load-duration-csvs \"data/duration-model-lower.csv\" \"data/duration-model-median.csv\" \"data/duration-model-upper.csv\")" "(load-duration-csv \"data/duration-model-lower.csv\")" "(count (remove-unmodelled-episodes data))" "(count data)" "(:episodes (first (filter #(= (:period-id %) \"120-2\") result)))" "(first (filter #(= (:period-id %) \"120-2\") result))" "(filter #(= (:period-id %) \"120-2\") result)" "(get (filter #(= (:period-id %) \"120-2\") result) :episodes)" "(filter #(= (:period-id %) \"120-2\") result)" "(def result (->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))))" "result" "(def result (->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))))" "(summarise-periods-at (first (->> (episodes data)
                                           (assoc-period-id)
                                           (group-by :period-id)
                                           (vals))) projection-start)" "(->> (episodes data)
                                           (assoc-period-id)
                                           (group-by :period-id)
                                           (vals))" "(summarise-periods-at (first (->> (episodes data)
                                           (assoc-period-id)
                                           (group-by :period-id)
                                           (vals))) projection-start)" "(summarise-periods-at (->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)) projection-start)" "result" "(def result (->> (episodes (take 3 data))
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))))" "(take 3 data)" "(def result (->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))))" "(first result)" "(def result (->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))))" "(first result)" "(def result (->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))))" "result" "(first result)" "(def result (->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))))" "(/ 8 2)" "(/ (d/draw (d/normal {:mu 0 :sd 1})) 1.96)" "(d/draw (d/normal {:mu 0 :sd 1}))" "(model/duration-model foo)" "(def foo *1)" "(core/load-duration-csvs \"data/duration-model-lower.csv\"
                                                    \"data/duration-model-median.csv\"
                                                    \"data/duration-model-upper.csv\")" "(/ (d/draw (d/normal {:mu 0 :sd 1})) 1.96)" "(d/draw (d/normal {:mu 0 :sd 1}))" "(inc 100)" "(inc (rand-int 100))" "(rand-int 100)" "(load-duration-csv \"duration-model-lower.csv\")" "(load-duration-csv \"~/mc/witan.csc.suffolk/data/duration-model-lower.csv\")" "(load-duration-csv \"~/mc/witan.csc.suffolk/data/duration-model-lower.csv\"))" "(load-duration-csv \"~/mc/witan.csc.suffolk/data/duration-model-lower.csv\")" "(load-duration-csv \"data/duration-model-lower.csv\")" "(map :episodes (->> (episodes data)
                     (assoc-period-id)
                     (group-by :period-id)
                     (vals)
                     (map #(summarise-periods-at % projection-start))))" "(->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start)))" "(filter #(= (:period-id %) \"120-0\") (->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))))" "(->> (episodes data)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start)))" "(->> (episodes bar)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start)))" "(first (episodes bar))" "(summarise-periods-at (first (episodes bar)) projection-start)" "(->> (episodes bar)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start)))" "(->> (episodes bar)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))
                    count)" "(count (episodes bar))" "(count (episode bar))" "(->> (episodes bar)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start))
                    count)" "(->> (episodes bar)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals)
                    (map #(summarise-periods-at % projection-start)))" "(->> (episodes bar)
                    (assoc-period-id)
                    (group-by :period-id)
                    (vals))" "(map #(summarise-periods-at % projection-start) (episodes bar))" "(summarise-periods-at (episodes bar) projection-start)" "projection-start" "(->> (mapcat (juxt :report-date :ceased) bar)
                              (remove nil?)
                              (sort)
                              (last))" "bar" "(def bar (episodes data))" "(def foo (episodes data))" "(episodes data)" "(def foo (episodes data))" "(def foo (assoc-period-id (episodes data)))" "(assoc-period-id (filter #(= (:child-id %) 120) (episodes data)))" "(assoc-period-id-test (filter #(= (:child-id %) 120) (episodes data)))" "(assoc-period-id-test child)" "(filter #(= (:child-id %) 120) (episodes data))" "(filter #(= :child-id 120) (episodes data))" "(filter #(= :child-id \"120\") (episodes data))" "(filter #(= :id \"120\") (episodes data))" "(map :period-id(assoc-period-id (episodes data)))" "(assoc-period-id (episodes data))" "(reductions (fn [period [one next]]
                                 (cond (not= (:child-id one) (:child-id next)) 0
                                       (not= (:ceased one) (:report-date next)) (inc period)
                                       :else period))
                               0
                               (partition 2 1 (sort-by (juxt :child-id :report-date) (episodes data))))" "(reductions (fn [period [one next]]
                                 (cond (not= (:child-id one) (:child-id next)) 0
                                       (not= (:ceased one) (:report-date next)) (inc period)
                                       :else period))
                               0
                               (partition 2 1 (sort-by (juxt :child-id :report-date) data)))" "(sort-by (juxt :child-id :report-date) data)" "(count (assoc-period-id (episodes (map format-episode data))))" "(assoc-period-id (episodes (map format-episode data)))" "(count (episodes (map format-episode data)))" "(count (assoc-period-id (episodes (map format-episode data))))" "(episodes (map format-episode data))" "(count (episodes (map format-episode data)))" "(assoc-period-id (episodes (map format-episode data)))" "(episodes (map format-episode data))" "(episodes-test (map format-episode data))" "(< 2016 2017)" "(< 2018 2017)" "(count (remove-stale-rows (map format-episode data)))" "(remove-stale-rows (map format-episode data))" "(map format-episode data)" "(remove-stale-rows data)" "(remove-unmodelled-episodes data)" "(format-episode (nth data 3))" "(map format-episode data)" "data" "(map format-episode data)" "(map data format-episode)" "(type foo)" "(first foo)" "(def foo (load-csv \"data/episodes.csv\"))" "(keyword \"a\")" "(blank-row? [\"a\" 1])" "(blank-row? [a 1])" "(blank-row? [])" "(blank-row? {:a 1})" "(blank-row? {})" "(main [\"E09000021\"] 2011 2029)" "(main [\"E09000027\"] 2011 2029)" "(main [E09000027] 2011 2029)" "(:column-names foo)" "(second foo)" "(first foo)" "(def foo (load-csv \"data/episodes.csv\"))" "(-main)" "(xl/sheet-seq \"data/2019-04-10 Mastodon CiC data - DOB years only ANONYMISED V3.xlsx\")" "(xlj/sheet-seq \"data/2019-04-10 Mastodon CiC data - DOB years only ANONYMISED V3.xlsx\")" "(rows \"data/2019-04-10 Mastodon CiC data - DOB years only ANONYMISED V3.xlsx\" \"201718 Episodes\")" "(-main \"data/config-expansion-scenario.edn\")" "(first (repeat 2.5 2))" "(first (repeat 2 2.5))" "(-main \"data/config-expansion-scenario.edn\")" "(Math/round 2)" "(-main \"data/config-expansion-scenario.edn\")" "(Math/round 2.4)" "(Math/round 2.6)" "(Math/round 2.5)" "(Math/round 2.9)" "(math/round 2.9)" "(round 2.9)" "(repeat 2.9 (+ 1 1))" "(repeat 2.6 (+ 1 1))" "(repeat 2.2 (+ 1 1))" "(repeat 2 (+ 1 1))" "(repeat (+ 1 1))" "(-main \"data/config-expansion-scenario.edn\")" "(-main \"data/config-scenario-1.edn\")" "(-main \"data/config-expansion-scenario.edn\")" "(-main \"data/config-scenario-1.edn\")" "(-main \"data/config-expansion-scenario.edn\")" "(-main \"config-expansion-scenario.edn\")" "(-main \"data/demo/config-transitions-to-change.edn\")" "(-main \"data/config-transitions-to-change.edn\")" "(-main \"config-transitions-to-change.edn\")" "(-main)" "(-main \"config-expansion-scenario.edn\")" "pred-map" "(filter (fn [t] (every? identity (build-predicates data pred-map))))" "(build-predicates data pred-map)" "pred-map" "data" "(concat '({:a 1 :b 2} {:a 3 :b 5}) '({:a 4 :b 3} {:a 6 :b 3}))" "(reduce (fn [x s] (remove (fn [t] (every? identity (build-predicates t s))) x)) data foo)" "foo" "(reduce (fn [x s] (remove (fn [t] (every? identity (build-predicates t pred-map))) x)) data foo)" "foo" "bar" "(remove (fn [t] (every? identity (build-predicates t pred-map))) data)" "(remove (fn [t s] (every? identity (build-predicates data pred-map))) x)" "(reduce #(fn [x] (remove (fn [t s] (every? identity (build-predicates t s))) x))
                                                                 data foo)" "(reduce #((remove (fn [t s] (every? identity (build-predicates t s)))))
                                                                 data foo)" "(reduce #((->> transitions
                                         (remove (fn [t s] (every? identity (build-predicates t s))))))
                                                                 data foo)" "(funktion pred-map data)" "(defn funktion [pred-map data]
    (filter #(every? identity (map (fn [[k v]] (partial (= (k %) v))) pred-map)) data))" "data" "(funktion pred-map data)" "(defn funktion [pred-map data]
    (filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) pred-map)) data))" "(def pred-map {:setting-2 :MU, :academic-year-2 10})" "(def data '({:calendar-year 2018, :setting-1 :MU, :need-1 :ASD, :setting-2 :MSSE, :need-2 :ASD, :academic-year-2 12, :academic-year-1 10} {:calendar-year 2017, :setting-1 :MU, :need-1 :ASD, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9} {:calendar-year 2018, :setting-1 :NONSEND, :need-1 :NONSEND, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9}))" "(funktion (nth foo 2) bar)" "(funktion (nth foo 1) bar)" "(count (funktion (first foo) bar))" "(funktion (first foo) bar)" "(defn funktion [pred-map data]
    (let [modify-transition-by (:modify-transition-by pred-map)
          pred-map (dissoc pred-map :modify-transition-by)]
      (filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) pred-map)) data)))" "(def funktion [pred-map data]
    (let [modify-transition-by (:modify-transition-by pred-map)
          pred-map (dissoc pred-map :modify-transition-by)]
      (filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) pred-map)) data)))" "(map (fn [[k v]]  [k (* v 2)]) seb)" "(into [] (fn [[k v]] (* v 2)) seb)" "(map (fn [[k v]] (* v 2)) seb)" "(map #(first %) seb)" "(def seb '([[\"this\" \"that\"] 1] [[\"something\" \"else\"] 2]))" "(first seb)" "seb" "(map (first) seb)" "(map (fn [k v] v) seb)" "(map (fn [k v] (* v 2)) seb)" "(def seb '([[\"this\" \"that\"] 1]))" "(filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (nth foo 2))) bar)" "(def foo [{:setting-2 :MU, :academic-year-2 10} {:setting-2 :MSSE, :academic-year-2 12} {:setting-2 :MU, :academic-year-2 10 :calendar-year 2017}])" "(filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) {:setting-2 :MU, :academic-year-2 10 :calendar-year 2017})) bar)" "(filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(def bar '({:calendar-year 2018, :setting-1 :MU, :need-1 :ASD, :setting-2 :MSSE, :need-2 :ASD, :academic-year-2 12, :academic-year-1 10} {:calendar-year 2017, :setting-1 :MU, :need-1 :ASD, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9} {:calendar-year 2018, :setting-1 :NONSEND, :need-1 :NONSEND, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9}))" "(filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(def bar '({:calendar-year 2017, :setting-1 :MU, :need-1 :ASD, :setting-2 :MSSE, :need-2 :ASD, :academic-year-2 12, :academic-year-1 10} {:calendar-year 2018, :setting-1 :MU, :need-1 :ASD, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9} {:calendar-year 2018, :setting-1 :NONSEND, :need-1 :NONSEND, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9}))" "(filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (second foo))) bar)" "(filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(def bar '({:calendar-year 2018, :setting-1 :MU, :need-1 :ASD, :setting-2 :MSSE, :need-2 :ASD, :academic-year-2 12, :academic-year-1 10} {:calendar-year 2018, :setting-1 :MU, :need-1 :ASD, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9} {:calendar-year 2018, :setting-1 :NONSEND, :need-1 :NONSEND, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9}))" "(filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(remove #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(def foo [{:setting-2 :MU, :academic-year-2 10} {:setting-2 :MSSE, :academic-year-2 12}])" "(remove #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(map #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "#(every? true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar" "(filter #(every? true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(filter #(true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(map #(true? (map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(filter true? #(map (fn [[k v]] (partial (= (k %) v))) (first foo)) bar)" "foo" "(first bar)" "((apply juxt #(map (fn [[k v]] (partial (= (k %) v))) (first foo))) (first bar))" "((apply juxt #(map (fn [[k v]] (partial (= (k %) v))) (first foo))))first bar" "((apply juxt #(map (fn [[k v]] (partial (= (k %) v))) (first foo))) bar)" "(apply juxt #(map (fn [[k v]] (partial (= (k %) v))) (first foo)) bar)" "(filter #(map (fn [[k v]] (partial (= (k %) v))) (first foo)) bar)" "(map #(map (fn [[k v]] (partial (= (k %) v))) (first foo)) bar)" "(filter #(map (fn [[k v]] (partial (= (k %) v))) qux) bar)" "(map #(map (fn [[k v]] (partial (= (k %) v))) qux) bar)" "(map (map (fn [[k v]] (partial #(= (k %) v))) qux) bar)" "(map (map (fn [[k v]] (partial (= (k %) v))) qux) bar)" "qux" "(apply juxt #(map (fn [[k v]] (partial (= (k %) v))) qux) (first bar))" "(apply juxt (map (fn [[k v]] (partial #(= (k %) v))) qux) (first bar))" "(first bar)" "bar" "(map (map (fn [[k v]] (partial #(= (k %) v))) qux) bar)" "(map (fn [[k v]] (partial #(= (k %) v))) qux)" "qux" "(def qux {:need-1 :ASD})" "foo" "((partial map #(= (:need-1 %) :ASD)) bar)" "((partial map #(= (:calendar-year %) 2018)) bar)" "(partial map #(= (:calendar-year %) 2018))" "((partial filter (partial #(= (:need-1 %) :ASD))) bar)" "(partial filter (partial #(= (:need-1 %) :ASD)))" "(filter (partial #(= (:need-1 %) :ASD)) bar)" "(filter (partial #(= (:calendar-year %) 2018)) bar)" "(map (partial #(= (:calendar-year %) 2018)) bar)" "((partial #(= (:calendar-year %) 2018)) bar)" "(partial #(= (:calendar-year %) 2018))" "(map (fn [[k v]] (partial #(= (k %) v))) (first foo))" "(def bar '({:calendar-year 2018, :setting-1 :MU, :need-1 :ASD, :setting-2 :MSSE, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9} {:calendar-year 2018, :setting-1 :MU, :need-1 :ASD, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9} {:calendar-year 2018, :setting-1 :NONSEND, :need-1 :NONSEND, :setting-2 :MU, :need-2 :ASD, :academic-year-2 10, :academic-year-1 9}))" "(def foo [{:setting-2 :MU, :academic-year-2 1} {:setting-2 :MSSE, :academic-year-2 12}])" "(run! au/run-model-for-test [config-splicing])" "(run! au/run-model-for-test [config config-splicing])" "(nth (load-results-triple \"joiner_beta_expectations.csv\") 0)" "load-results-triple" "(def load-results-triple (fn [f] [(au/load-results config f),
                                       (au/load-results config-splicing f)
                                       (au/load-results config-splicing-for-checking f)]))" "(def config-splicing-for-checking (m/read-config \"data/demo/config_for_checking_splicing.edn\"))" "(def config-splicing (m/read-config \"data/demo/config_splicing.edn\"))" "(def config (m/read-config \"data/demo/config.edn\"))" "config (m/read-config \"data/demo/config.edn\")" "(reduce #(sequence (mp/build-filter %2) %1) transitions filter-transitions-from-c)" "(reduce #(sequence (mp/build-filter %) transitions) filter-transitions-from-c)" "(map #(sequence (mp/build-filter %) transitions) filter-transitions-from-c)" "(def transitions (list {:calendar-year 2015, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :MU, :need-2 :NA, :academic-year-2 12}
                          {:calendar-year 2015, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :AK, :need-2 :NA, :academic-year-2 12}
                          {:calendar-year 2015, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 9, :setting-2 :AK, :need-2 :NA, :academic-year-2 10}
                          {:calendar-year 2016, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 12, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 13}
                          {:calendar-year 2016, :setting-1 :MU, :need-1 :NA, :academic-year-1 10, :setting-2 :MU, :need-2 :NA, :academic-year-2 11}
                          {:calendar-year 2016, :setting-1 :AK, :need-1 :NA, :academic-year-1 10, :setting-2 :MU, :need-2 :NA, :academic-year-2 11}
                          {:calendar-year 2017, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 12}
                          {:calendar-year 2017, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 12, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 13}
                          {:calendar-year 2017, :setting-1 :MU, :need-1 :NA, :academic-year-1 11, :setting-2 :MU, :need-2 :NA, :academic-year-2 12}))" "(mp/build-filter (first filter-transitions-from-c))" "(first filter-transitions-from-c)" "(def filter-transitions-from-c {:calendar-academic {:< 2017 :> 12} :calendar-setting {:< 2017 := :MU}})" "(sequence (mp/build-filter filter-transitions-from-b) transitions)" "(sequence (mp/build-filter filter-transitions-from-a) transitions)" "(def filter-transitions-from-b [:calendar-setting {:< 2017 := :MU}])" "(def filter-transitions-from-a [:calendar-academic {:< 2017 :>= 12}])" "(def transitions (list {:calendar-year 2015, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :MU, :need-2 :NA, :academic-year-2 12} ; remove
                                         {:calendar-year 2015, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :AK, :need-2 :NA, :academic-year-2 12} ; remove
                                         {:calendar-year 2015, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 9, :setting-2 :AK, :need-2 :NA, :academic-year-2 10} ; keep
                                         {:calendar-year 2016, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 12, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 13} ; keep
                                         {:calendar-year 2016, :setting-1 :MU, :need-1 :NA, :academic-year-1 10, :setting-2 :MU, :need-2 :NA, :academic-year-2 11} ; keep
                                         {:calendar-year 2016, :setting-1 :AK, :need-1 :NA, :academic-year-1 10, :setting-2 :MU, :need-2 :NA, :academic-year-2 11} ; keep
                                         {:calendar-year 2017, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 12} ; keep
                                         {:calendar-year 2017, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 12, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 13} ; keep
                                         {:calendar-year 2017, :setting-1 :MU, :need-1 :NA, :academic-year-1 11, :setting-2 :MU, :need-2 :NA, :academic-year-2 12}))" "(sequence (mp/build-filter filter-transitions-from-b) transitions)" "(sequence (mp/filter-transitions filter-transitions-from-b) transitions)" "(mp/filter-transitions filter-transitions-from-b transitions)" "(def filter-transitions-from-b [:calendar-setting {:< 2017 := :MU}])" "(clojure.pprint/pprint (sequence (mp/build-filter (first filter-transitions-from-a)) transitions))" "(clojure.pprint/pprint transitions)" "(sequence (mp/build-filter (first filter-transitions-from-a)) transitions)" "(into [] (mp/build-filter (first filter-transitions-from-a)) transitions)" "transitions" "(mp/build-filter (first filter-transitions-from-a) transitions)" "(#((mp/build-filter (first filter-transitions-from-a)) %) transitions) " "((mp/build-filter (first filter-transitions-from-a)) transitions) " "(mp/build-filter (first filter-transitions-from-a)) " "(#((mp/build-filter (first filter-transitions-from-a)) %) transitions) " "(#((mp/build-filter (first filter-transitions-from-a)) %)) transitions" "(((mp/build-filter (first filter-transitions-from-a))) transitions)" "(type ((mp/build-filter (first filter-transitions-from-a)) transitions))" "transitions" "(->> transitions ((mp/build-filter (first filter-transitions-from-a))))" "(->> transitions (mp/build-filter (first filter-transitions-from-a)))" "((mp/build-filter (first filter-transitions-from-a)) transitions)" "(mp/build-filter (first filter-transitions-from-a))" "val2" "(def val2 (second (vals v)))" "val1" "(def val1 (first (vals v)))" "op2" "(def op2 (mp/operator-key (second (keys v))))" "op1" "(def op1 (mp/operator-key (first (keys v))))" "(def op1 (mpoperator-key (first (keys v))))" "(mp/operator-key (first (keys v)))" "(first (keys v))" "(keys (first v))" "(first v)" "(first (keys (first v)))" "(def op1 (mp/operator-key (first (keys (first v)))))" "(def op1 (operator-key (first (keys (first v)))))" "k" "v" "(def v (second filter-kv))" "(def k (first filter-kv))" "(def filter-kv (first filter-transitions-from-a))" "(second filter-kv)" "filter-kv" "v" "(def v (second filter-kv))" "(def y)" "(def k (first filter-kv))" "(def filter-kv filter-transitions-from-a)" "(mp/build-filter filter-transitions-from-a)" "(first (first filter-transitions-from-a))" "(first filter-transitions-from-a)" "(def filter-transitions-from-a {:calendar-academic {:< 2017 :>= 12}})" "(vals filter-transitions-from-a)" "filter-transitions-from-a" "(keys filter-transitions-from-a)" "(mp/build-filter filter-transitions-from-a)" "filter-transitions-from-a" "(def filter-transitions-from-a [:calendar-academic {:< 2017 :>= 12}])" "filter-transitions-from-a" "(mp/build-filter filter-transitions-from-a)" "transitions" "(= 1 2)" "(def foo {:calendar-academic {:< 2017, :>= 12}})" "(second (vals (first v)))" "(first (vals (first v)))" "(vals (first v))" "( first v)" "v" "(mp/operator-key (second (keys (first v))))" "(mp/operator-key (first (keys (first v))))" "(mp/operator (first (keys (first v))))" "(first (keys (first v)))" "(firt (keys (first v)))" "(keys v)" "(keys (first v))" "(vals (first v))" "(val (first v))" "(first v)" "(mp/operator-key (first v))" "(operator-key (first v))" "(def v (vals filter-kv))" "(def v (val (filter-kv)))" "(def v (vals (filter-kv)))" "(def k (keys filter-kv))" "(def filter-kv {:calendar-academic {:< 2017, :>= 12}})" "(first filter-transitions-from-a)" "(((second (keys (val (first filter-transitions-from-a)))) mp/operators) 2 1)" "(((first (keys (val (first filter-transitions-from-a)))) mp/operators) 2 1)" "(1 ((first (keys (val (first filter-transitions-from-a)))) mp/operators) 2)" "((first (keys (val (first filter-transitions-from-a)))) mp/operators)" "((first (keys (val (first filter-transitions-from-a)))) operators)" "(first (keys (val (first filter-transitions-from-a))))" "(name (first (keys (val (first filter-transitions-from-a)))))" "(first (keys (val (first filter-transitions-from-a))))" "(keys (val (first filter-transitions-from-a)))" "(val (first filter-transitions-from-a))" "(vals (first filter-transitions-from-a))" "(first filter-transitions-from-a)" "(second (keys filter-transitions-from-a))" "(first (keys filter-transitions-from-a))" "(key filter-transitions-from-a)" "(keys filter-transitions-from-a)" "(first filter-transitions-from-a)" "(def filter-transitions-from-a {:calendar-academic {:< 2017 :>= 12}})" "(clojure.pprint/pprint (mp/filter-transitions filter-transitions-from-a transitions))" "(clojure.pprinjt/pprint (mp/filter-transitions filter-transitions-from-a transitions))" "(def filter-transitions-from-c [[2017 12] [2017 :MU]])" "(def filter-transitions-from-c) [[2017 12] [2017 :MU]]" "(def y)" "(def filter-transitions-from-b [[2017 :MU]])" "(def filter-transitions-from-a [[2017 12]])" "(clojure.pprint/pprint transitions)" "(clojure.pprint/pprint (mp/filter-transitions filter-transitions-from transitions))" "(pprint/pprint (mp/filter-transitions filter-transitions-from transitions))" "(pprint (mp/filter-transitions filter-transitions-from transitions))" "(println (mp/filter-transitions filter-transitions-from transitions))" "(mp/filter-transitions filter-transitions-from transitions)" "(def filter-transitions-from [[2017 12] ])" "(mp/filter-transitions filter-transitions-from transitions)" "(def filter-transitions-from [[2017 12] [2017 :MU]])" "(def transitions (list {:calendar-year 2016, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :MU, :need-2 :NA, :academic-year-2 12} ; keep?
                          {:calendar-year 2016, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :AK, :need-2 :NA, :academic-year-2 12} ; keep
                          {:calendar-year 2016, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 12, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 13} ; remove
                          {:calendar-year 2016, :setting-1 :MU, :need-1 :NA, :academic-year-1 10, :setting-2 :MU, :need-2 :NA, :academic-year-2 11} ; remove
                          {:calendar-year 2016, :setting-1 :AK, :need-1 :NA, :academic-year-1 10, :setting-2 :MU, :need-2 :NA, :academic-year-2 11} ; keep?
                          {:calendar-year 2017, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 12} ; keep
                          {:calendar-year 2017, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 12, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 13} ; keep
                          {:calendar-year 2017, :setting-1 :MU, :need-1 :NA, :academic-year-1 11, :setting-2 :MU, :need-2 :NA, :academic-year-2 12}))" "(-main \"data/config-handle-fec-and-mu-growth.edn\")" "(-main)" "(-main \"data/config-handle-fec-and-mu-growth.edn\")" "(load-csv \"data/baseline/transitions.csv\")" "(load-csv \"/data/baseline/transitions.csv\")" "(-main \"config-handle-fec-and-mu-growth.edn\")" "(-main)" "(mp/filter-transitions filter-transitions-from transitions)" "(def filter-transitions-from [[2017 12] [2017 :MU]])" "(mp/filter-transitions filter-transitions-from transitions)" "(def filter-transitions-from [[2017 12] [2017 :MU]])" "(mp/filter-transitions filter-transitions-from transitions)" "(print (mp/filter-transitions filter-transitions-from transitions))" "(println (mp/filter-transitions filter-transitions-from transitions))" "(mp/filter-transitions filter-transitions-from transitions)" "(def filter-transitions-from [[2017 12] [2017 :MU]])" "(def transitions (list {:calendar-year 2016, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :MU, :need-2 :NA, :academic-year-2 12} ; keep?
                          {:calendar-year 2016, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :AK, :need-2 :NA, :academic-year-2 12} ; keep
                          {:calendar-year 2016, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 12, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 13} ; remove
                          {:calendar-year 2016, :setting-1 :MU, :need-1 :NA, :academic-year-1 10, :setting-2 :MU, :need-2 :NA, :academic-year-2 11} ; remove
                          {:calendar-year 2016, :setting-1 :AK, :need-1 :NA, :academic-year-1 10, :setting-2 :MU, :need-2 :NA, :academic-year-2 11} ; keep?
                          {:calendar-year 2017, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 11, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 12} ; keep
                          {:calendar-year 2017, :setting-1 :NONSEND, :need-1 :NA, :academic-year-1 12, :setting-2 :MMSIB, :need-2 :NA, :academic-year-2 13} ; keep
                          {:calendar-year 2017, :setting-1 :MU, :need-1 :NA, :academic-year-1 11, :setting-2 :MU, :need-2 :NA, :academic-year-2 12}))" "(-main)" "(-main \"data/Ealing/config-handle-fec-and-mu-growth.edn\")" "(-main)" "(get-in foo [:output-parameters :output-dir])")